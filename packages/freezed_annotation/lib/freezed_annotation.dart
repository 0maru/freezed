export "package:meta/meta.dart";
export "package:collection/collection.dart";
export "package:json_annotation/json_annotation.dart";

/// A base class for all classes generated by Freezed.
///
/// It exposes a few debug utilities used by devtools.
/// These utilities are not visible when using the generated class normally.
/// They are used by casting the object.
///
/// These utilities are available only if asserts are enabled (read here:
/// not in release mode for Flutter).
abstract class $DebugFreezed {
  /// The name of the redirected class.
  ///
  /// Consider:
  ///
  /// ```dart
  /// abstract class Example with _$Example {
  ///   factory Example() = _Example;
  ///   factory Example.named() = _ExampleNamed;
  /// }
  /// ```
  ///
  /// Then we have:
  ///
  /// ```dart
  /// print((Example()) as $Freezed).$debugRedirectedClassName); // _Example
  /// print((Example.named()) as $Freezed).$debugRedirectedClassName); // _ExampleNamed
  /// ```
  String get $debugRedirectedClassName;

  /// Transform the object in a [Map], even if the object is not serializable.
  ///
  /// This is a workaround to the lack of reflection in Flutter.
  /// By transforming the object into a [Map], it allows some pseudo reflection.
  ///
  /// The transformation is not recursive and the content of each properties
  /// is untouched.
  ///
  /// Consider:
  /// ```dart
  ///  @freezed
  ///  abstract class Company with _Company {
  ///    factory Company({String name, Director director}) = _Company;
  ///  }
  ///
  ///  @freezed
  ///  abstract class Director with _Director {
  ///    factory Director({String name}) = _Director;
  /// }
  /// ```
  ///
  /// Then we have:
  ///
  /// ```dart
  /// void main() {
  ///   final company = Company(name: 'Example', director: Director(name: 'John'));
  ///
  ///   print(company.$debugToMap()); // { name: 'Example', director: Director(name: 'John')) }
  ///   print(company.$director.debugToMap()); // { name: 'John' }
  /// }
  /// ```
  Map<String, Object> $debugToMap();
}

class Freezed {
  const Freezed._();
}

/// An annotation for the `freezed` package.
///
/// Annotating a class with this annotation will flag it as needing to be
/// processed by the `freezed` code generator.
const freezed = Freezed._();

class _Nullable {
  const _Nullable._();
}

/// Mark the generated property as nullable.
///
/// This disables the generation of `assert(property != null)` on both the
/// constructor and clone methods for the decorated property.
const nullable = _Nullable._();

class _Late {
  const _Late._();
}

/// Mark a getter as safe to cache.
///
/// Getters marked with `late` will be called **at most** once per instane of the
/// object.\
/// Only getters using the `=>` syntax are supported. Getters with `{}` are not.
///
/// This makes the getter behave similarly to the upcoming `late` keyword:
///
/// ```dart
/// @late
/// String get fullName => '$firstName $lastName';
/// ```
///
/// is the equivalent to the upcoming:
///
/// ```dart
/// late final fullName = '$firstName $lastName';
/// ```
const late = _Late._();

/// Allows passing default values to a constructor:
///
/// ```dart
/// abstract class Example with _$Example {
///  factory Example(@Default(42) int value) = _Example;
/// }
/// ```
///
/// is equivalent to:
///
/// ```dart
/// abstract class Example with _$Example {
///  factory Example(@JsonKey(defaultValue: 42) int value = 42) = _Example;
/// }
/// ```
class Default {
  const Default(this.defaultValue);

  final Object defaultValue;
}
